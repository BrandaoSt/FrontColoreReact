{"ast":null,"code":"\"use strict\";\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  Object.defineProperty(o, k2, {\n    enumerable: true,\n    get: function () {\n      return m[k];\n    }\n  });\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nvar __exportStar = this && this.__exportStar || function (m, exports) {\n  for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.loadEmittersPlugin = void 0;\n\nconst CircleShape_1 = require(\"./Shapes/Circle/CircleShape\");\n\nconst Emitter_1 = require(\"./Options/Classes/Emitter\");\n\nconst Emitters_1 = require(\"./Emitters\");\n\nconst ShapeManager_1 = require(\"./ShapeManager\");\n\nconst SquareShape_1 = require(\"./Shapes/Square/SquareShape\");\n\nconst Utils_1 = require(\"../../Utils\");\n\nclass EmittersPlugin {\n  constructor() {\n    this.id = \"emitters\";\n  }\n\n  getPlugin(container) {\n    return new Emitters_1.Emitters(container);\n  }\n\n  needsPlugin(options) {\n    var _a, _b, _c;\n\n    if (options === undefined) {\n      return false;\n    }\n\n    const emitters = options.emitters;\n    return emitters instanceof Array && !!emitters.length || emitters !== undefined || !!((_c = (_b = (_a = options.interactivity) === null || _a === void 0 ? void 0 : _a.events) === null || _b === void 0 ? void 0 : _b.onClick) === null || _c === void 0 ? void 0 : _c.mode) && (0, Utils_1.isInArray)(\"emitter\", options.interactivity.events.onClick.mode);\n  }\n\n  loadOptions(options, source) {\n    var _a, _b;\n\n    if (!this.needsPlugin(options) && !this.needsPlugin(source)) {\n      return;\n    }\n\n    const optionsCast = options;\n\n    if (source === null || source === void 0 ? void 0 : source.emitters) {\n      if ((source === null || source === void 0 ? void 0 : source.emitters) instanceof Array) {\n        optionsCast.emitters = source === null || source === void 0 ? void 0 : source.emitters.map(s => {\n          const tmp = new Emitter_1.Emitter();\n          tmp.load(s);\n          return tmp;\n        });\n      } else {\n        let emitterOptions = optionsCast.emitters;\n\n        if ((emitterOptions === null || emitterOptions === void 0 ? void 0 : emitterOptions.load) === undefined) {\n          optionsCast.emitters = emitterOptions = new Emitter_1.Emitter();\n        }\n\n        emitterOptions.load(source === null || source === void 0 ? void 0 : source.emitters);\n      }\n    }\n\n    const interactivityEmitters = (_b = (_a = source === null || source === void 0 ? void 0 : source.interactivity) === null || _a === void 0 ? void 0 : _a.modes) === null || _b === void 0 ? void 0 : _b.emitters;\n\n    if (interactivityEmitters) {\n      if (interactivityEmitters instanceof Array) {\n        optionsCast.interactivity.modes.emitters = interactivityEmitters.map(s => {\n          const tmp = new Emitter_1.Emitter();\n          tmp.load(s);\n          return tmp;\n        });\n      } else {\n        let emitterOptions = optionsCast.interactivity.modes.emitters;\n\n        if ((emitterOptions === null || emitterOptions === void 0 ? void 0 : emitterOptions.load) === undefined) {\n          optionsCast.interactivity.modes.emitters = emitterOptions = new Emitter_1.Emitter();\n        }\n\n        emitterOptions.load(interactivityEmitters);\n      }\n    }\n  }\n\n}\n\nasync function loadEmittersPlugin(engine) {\n  const plugin = new EmittersPlugin();\n  await engine.addPlugin(plugin);\n\n  if (!engine.addEmitterShape) {\n    engine.addEmitterShape = (name, shape) => {\n      ShapeManager_1.ShapeManager.addShape(name, shape);\n    };\n  }\n\n  engine.addEmitterShape(\"circle\", new CircleShape_1.CircleShape());\n  engine.addEmitterShape(\"square\", new SquareShape_1.SquareShape());\n}\n\nexports.loadEmittersPlugin = loadEmittersPlugin;\n\n__exportStar(require(\"./EmittersMain\"), exports);","map":null,"metadata":{},"sourceType":"script"}